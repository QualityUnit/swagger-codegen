/**
 * Copyright 2007 Quality Unit s.r.o.
 * 
 * Licensed under the Quality Unit, s.r.o. Standard End User License Agreement,
 * Version 1.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * http://www.qualityunit.com/licenses/license
 * 
 */

package {{apiPackage}};

import com.google.gwt.core.client.*;
import com.google.gwt.http.client.*;
import com.google.gwt.json.client.JSONObject;

import {{supportPackage}}.*;
import {{modelPackage}}.*;

import java.lang.IllegalArgumentException;
import java.util.*;

/**
 * Auto generated code from swagger api description. DO NOT EDIT !!!!
 * Codegen version: {{codegenVersion}}
 */
@SuppressWarnings("Duplicates")
{{#operations}}public class {{classname}} {

    private final ApiClient apiClient;

    public {{classname}}() {
        this(new ApiClient());
    }

    public {{classname}}(ApiClient apiClient) {
        if (apiClient == null) {
            throw new IllegalArgumentException();
        }
        this.apiClient = apiClient;
    }
    {{#operation}}

    public void {{gwtphpClientMethodName}}({{#allParams}}{{dataType}} {{paramName}}, {{/allParams}}final ApiCallback<{{#fnJsArray}}{{returnType}}{{/fnJsArray}}> callback) {
        String callUrl = "{{path}}";
        {{#pathParams}}
        callUrl = callUrl.replace("{" + "{{baseName}}" + "}", {{paramName}});
        {{/pathParams}}

        RequestCallback requestCallback = new RequestCallback() {
            public void onError(Request request, Throwable exception) {
                callback.onError(exception.getMessage());
            }
            @SuppressWarnings("unchecked")
            public void onResponseReceived(Request request, Response response) {
                try {
                    switch (response.getStatusCode()) {
                    {{#responses}}
                        {{#dataType}}
                            {{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
                                callback.{{#fnCallbackMethod}}{{code}}{{/fnCallbackMethod}}(({{#fnJsArray}}{{dataType}}{{/fnJsArray}}) JsonUtils.safeEval(response.getText()));
                                break;
                        {{/dataType}}
                    {{/responses}}
                    }
                } catch (IllegalArgumentException e) {
                    callback.onError(e.getMessage());
                }
            }
        };

        Map<String, List<?>> queryParams = new HashMap<String, List<?>>();
        {{#queryParams}}
        queryParams.put("{{baseName}}", Arrays.asList({{paramName}}));
        {{/queryParams}}

        {{#bodyParams}}
        String httpBody = new JSONObject({{paramName}}).toString();
        {{/bodyParams}}
        {{^bodyParams}}
        String httpBody = "";
        {{/bodyParams}}

        Map<String, String> headers = new HashMap<String, String>();
        headers.put("Content-Type", "application/json");
        headers.put("Accept", "application/json");
        {{#headerParams}}
        headers.put("{{baseName}}", {{paramName}});
        {{/headerParams}}

        apiClient.callApi(RequestBuilder.{{#fnUpperCase}}{{httpMethod}}{{/fnUpperCase}}, callUrl, httpBody, headers, queryParams, requestCallback);
    }
    {{/operation}}
}
{{/operations}}
