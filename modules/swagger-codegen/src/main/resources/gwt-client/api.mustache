/**
 * Copyright 2007 Quality Unit s.r.o.
 * 
 * Licensed under the Quality Unit, s.r.o. Standard End User License Agreement,
 * Version 1.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * http://www.qualityunit.com/licenses/license
 * 
 */

package {{apiPackage}};

import com.google.gwt.core.client.*;
import com.google.gwt.http.client.*;
import com.google.gwt.json.client.JSONObject;

import {{supportPackage}}.*;
import {{modelPackage}}.*;

import java.lang.IllegalArgumentException;
import java.util.*;

/**
 * Auto generated code from swagger api description. DO NOT EDIT !!!!
 * Codegen version: {{codegenVersion}}
 */
@SuppressWarnings("Duplicates")
{{#operations}}public class {{classname}} {

    private final ApiClient apiClient;

    public {{classname}}() {
        this(new ApiClient());
    }

    public {{classname}}(ApiClient apiClient) {
        if (apiClient == null) {
            throw new IllegalArgumentException();
        }
        this.apiClient = apiClient;
    }
    {{#operation}}

    /**
     * Call {{httpMethod}}:{{path}}
     *
     * {{{summary}}}
     *
     {{#allParams}}* @param {{paramName}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}} {{description}}
     {{/allParams}}* @param callback is called if response was received or if there was an error executing request
     * @see {{supportPackage}}.SimpleApiCallback
     * @see {{supportPackage}}.LoadingIndicationApiCallback
     */
    public void {{gwtphpClientMethodName}}({{#allParams}}{{#fnToWrapper}}{{dataType}}{{/fnToWrapper}} {{paramName}}, {{/allParams}}final ApiCallback<{{#fnJsArray}}{{returnType}}{{/fnJsArray}}> callback) {
        String callUrl = "{{path}}";
        {{#pathParams}}
        callUrl = callUrl.replace("{{#fnCurly}}{{baseName}}{{/fnCurly}}", {{paramName}}.toString());
        {{/pathParams}}

        RequestCallback requestCallback = new RequestCallback() {
            public void onError(Request request, Throwable exception) {
                callback.onError(0, exception.getMessage());
            }
            @SuppressWarnings("unchecked")
            public void onResponseReceived(Request request, Response response) {
                try {
                    switch (response.getStatusCode()) {
                    {{#responses}}
                        {{#dataType}}
                            {{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
                                callback.{{#fnCallbackMethod}}{{code}}{{/fnCallbackMethod}}(response.getStatusCode(), response.getHeaders(), ({{#fnJsArray}}{{dataType}}{{/fnJsArray}}) JsonUtils.safeEval(response.getText()));
                                break;
                        {{/dataType}}
                    {{/responses}}
                    }
                } catch (IllegalArgumentException e) {
                    callback.onError(0, e.getMessage());
                }
            }
        };

        Map<String, List<?>> queryParams = new HashMap<String, List<?>>();
        {{#queryParams}}
{{^required}}        if ({{paramName}} != null) {
    {{/required}}        queryParams.put("{{baseName}}", Arrays.asList(apiClient.parameterToString({{paramName}})));{{^required}}
        }{{/required}}
        {{/queryParams}}
        {{#formParams}}
        {{#-first}}
        Map<String, String> formParams = new HashMap<String, String>();
        {{/-first}}
{{^required}}        if ({{paramName}} != null) {
    {{/required}}        formParams.put("{{baseName}}", apiClient.parameterToString({{paramName}}));{{^required}}
        }{{/required}}
        {{/formParams}}

        {{#bodyParams}}
        String httpBody = new JSONObject({{paramName}}).toString();
        {{/bodyParams}}
        {{^bodyParams}}
        String httpBody = "";
        {{/bodyParams}}
        {{#formParams}}
        {{#-first}}
        StringBuilder formBodyParams = new StringBuilder();
        for (String id : formParams.keySet()) {
            formBodyParams.append(URL.encodeQueryString(id));
            formBodyParams.append("=");
            formBodyParams.append(URL.encodeQueryString(formParams.get(id)));
            formBodyParams.append("&");
        }
        formBodyParams.setLength(formBodyParams.length() - 1);
        httpBody = formBodyParams.toString();
        {{/-first}}
        {{/formParams}}

        Map<String, String> headers = new HashMap<String, String>();
        {{#formParams}}{{#-first}}headers.put("Content-Type", "application/x-www-form-urlencoded");{{/-first}}{{/formParams}}{{^formParams}}headers.put("Content-Type", "application/json");{{/formParams}}
        headers.put("Accept", "application/json");
        {{#headerParams}}
        headers.put("{{baseName}}", {{paramName}});
        {{/headerParams}}

        apiClient.callApi(RequestBuilder.{{#fnUpperCase}}{{httpMethod}}{{/fnUpperCase}}, callUrl, httpBody, headers, queryParams, requestCallback);
    }
    {{/operation}}
}
{{/operations}}
