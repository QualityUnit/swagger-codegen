<?php
/**
 *   @copyright Copyright (c) 2016 Quality Unit s.r.o.
 *
 *   Licensed under the Quality Unit, s.r.o. Standard End User License Agreement,
 *   Version 1.0 (the "License"); you may not use this file except in compliance
 *   with the License. You may obtain a copy of the License at
 *   http://www.qualityunit.com/licenses/license
 */

/**
 * Auto generated code from swagger api description. DO NOT EDIT !!!!
 * Codegen version: {{codegenVersion}}
 */
{{#operations}}class {{apiPackage}}_{{classname}}
{

    /**
     * API Client
     * @var RestApi_Client_ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    function __construct()
    {
    	$this->apiClient = RestApi_Client_ApiClient::getInstance();
    }

    {{#operation}}


    /**
     * Call {{httpMethod}}:{{path}}
     *
     * {{{summary}}}
     *
  {{#allParams}}   * @param {{dataType}} ${{paramName}} {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
  {{/allParams}}   * @return array of {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}null{{/returnType}}, HTTP status code, HTTP response headers (array of strings)
     * @throws RestApi_Client_ApiException on non-2xx response
     */
    public function {{gwtphpClientMethodName}}({{#allParams}}${{paramName}}{{^required}} = null{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
    {
        {{#allParams}}{{#required}}
        // verify the required parameter '{{paramName}}' is set
        if (${{paramName}} === null) {
            throw new InvalidArgumentException('Missing the required parameter ${{paramName}} when calling {{operationId}}');
        }{{/required}}{{/allParams}}
  
        // parse inputs
        $resourcePath = "{{path}}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array({{#produces}}'{{mediaType}}'{{#hasMore}}, {{/hasMore}}{{/produces}}));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array({{#consumes}}'{{mediaType}}'{{#hasMore}},{{/hasMore}}{{/consumes}}));
  
        {{#queryParams}}// query params
        {{#collectionFormat}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = RestApi_Client_Utils::serializeCollection(${{paramName}}, '{{collectionFormat}}', true);
        }
        {{/collectionFormat}}
        if (${{paramName}} !== null) {
            $queryParams['{{baseName}}'] = RestApi_Client_Utils::toQueryValue(${{paramName}});
        }{{/queryParams}}
        {{#headerParams}}// header params
        {{#collectionFormat}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = RestApi_Client_Utils::serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        if (${{paramName}} !== null) {
            $headerParams['{{baseName}}'] = RestApi_Client_Utils::toHeaderValue(${{paramName}});
        }{{/headerParams}}
        {{#pathParams}}// path params
        {{#collectionFormat}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = RestApi_Client_Utils::serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        if (${{paramName}} !== null) {
            $resourcePath = str_replace(
                    "{" . "{{baseName}}" . "}",
                    RestApi_Client_Utils::toPathValue(${{paramName}}),
                    $resourcePath
            );
        }{{/pathParams}}

        {{#bodyParams}}// body params
        if (isset(${{paramName}})) {
            $httpBody = ${{paramName}};
        }{{/bodyParams}}

        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, '{{httpMethod}}',
                $queryParams, $httpBody,
                $headerParams{{#returnType}}, '{{returnType}}'{{/returnType}}
            );{{#returnType}}
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }{{#isListContainer}}
            $responseObject = array();
            foreach($response as $item) {
                $responseObject[] = new {{#fnItemType}}{{returnType}}{{/fnItemType}}($item);
            }
            return array($responseObject, $statusCode, $httpHeader);{{/isListContainer}}{{^isListContainer}}{{#returnTypeIsPrimitive}}
            return array($response, $statusCode, $httpHeader);{{/returnTypeIsPrimitive}}{{^returnTypeIsPrimitive}}
            return array(new {{returnType}}($response), $statusCode, $httpHeader);{{/returnTypeIsPrimitive}}{{/isListContainer}}{{/returnType}}{{^returnType}}
            return array(null, $statusCode, $httpHeader);{{/returnType}}
        } catch (RestApi_Client_ApiException $e) {
            switch ($e->getCode()) { {{#responses}}{{#dataType}}
            {{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}{{^simpleType}}
                $data = array();
                foreach($e->getResponseBody() as $item) {
                    $data[] = new {{#fnItemType}}{{dataType}}{{/fnItemType}}($item);
                }
                $e->setResponseObject($data);{{/simpleType}}{{#simpleType}}{{^primitiveType}}
                $data = new {{dataType}}($e->getResponseBody());
                $e->setResponseObject($data);{{/primitiveType}}{{/simpleType}}
                break;{{/dataType}}{{/responses}}
            }
  
            throw $e;
        }
    }
    {{/operation}}
}
{{/operations}}
