<?php
{{#models}}
{{#model}}
/**
 *   @copyright Copyright (c) 2016 Quality Unit s.r.o.
 *   Licensed under the Quality Unit, s.r.o. Standard End User License Agreement,
 *   Version 1.0 (the "License"); you may not use this file except in compliance
 *   with the License. You may obtain a copy of the License at
 *   http://www.qualityunit.com/licenses/license
 */

/**
 * Auto generated code from swagger api description. DO NOT EDIT !!!!
 * Codegen version: {{codegenVersion}}
 */
class {{modelPackage}}_{{classname}} implements JsonSerializable, RestApi_HasHeaders {

    use RestApi_HeadersTrait;

    {{#vars}}const {{#fnUpperCase}}{{name}}{{/fnUpperCase}} = '{{name}}';{{#hasMore}}
    {{/hasMore}}{{/vars}}

    private static $fieldTypes = [{{#vars}}
            '{{name}}' => ['{{#isPrimitiveType}}{{datatype}}{{/isPrimitiveType}}{{^isPrimitiveType}}mixed[]{{/isPrimitiveType}}'{{#hasDefaultValue}}, {{{defaultValue}}}{{/hasDefaultValue}}]{{#hasMore}},{{/hasMore}}{{/vars}}];

    /**
     * @var RestApi_TypeUtils_Field[]
     */
    private $data = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     * @throws RestApi_FieldValidityException
     */
    public function __construct($data = null) {
        if ($data === null || !is_array($data)) {
            $data = [];
        }
        foreach (self::$fieldTypes as $fieldName => $info) {
            try {
                $this->data[$fieldName] = RestApi_TypeUtils_Field::of($info[0], @$data[$fieldName], @$info[1]);
            } catch (RestApi_TypeUtils_ParseException $e) {
                throw new RestApi_FieldValidityException($fieldName, $e->getMessage())
            }
        }
    }

    /**
     * @return mixed[]
     */
    public function getData() {
        $result = [];
        foreach($this->data as $fieldName => $field) {
            if($field->get() !== null) {
                $result[$fieldName] = $field->get();
            }
        }
        return $result;
    }
    
    public function jsonSerialize() {
        return $this->getData();
    }
{{#vars}}
    /**
     * Gets {{name}}
     * @return {{datatype}}
     */
    public function {{getter}}() { {{^isPrimitiveType}}{{#isContainer}}
        $data = [];
        foreach ($this->data['{{name}}']->get() as $item) {
           $data[] = new {{#fnItemType}}{{datatype}}{{/fnItemType}}($item);
        }
        return $data;{{/isContainer}}{{^isContainer}}
        $data = $this->data['{{name}}']->get();
        if($data === []) {
            return null;
        }
        return new {{datatype}}($data);{{/isContainer}}{{/isPrimitiveType}}{{#isPrimitiveType}}
        return $this->data['{{name}}']->get();{{/isPrimitiveType}}
    }

    /**
     * Sets {{name}}
     * @param {{datatype}} ${{name}} {{#description}}{{{description}}}{{/description}}
     * @return $this
     * @throws \InvalidArgumentException
     */
    public function {{setter}}({{^isContainer}}{{^isPrimitiveType}}{{datatype}} {{/isPrimitiveType}}{{/isContainer}}{{#isContainer}}array {{/isContainer}}${{name}}) { {{#isEnum}}
        $allowed_values = [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}];
        if (!in_array(${{{name}}}, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for '{{name}}', must be one of {{#allowableValues}}{{#values}}'{{{this}}}'{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}");
        }
        {{/isEnum}}{{#isContainer}}{{^isPrimitiveType}}
        $data = [];
        foreach (${{name}} as $item) {
            $data[] = $item->getData();
        }
        try {
            $this->data['{{name}}']->set($data);{{/isPrimitiveType}}{{#isPrimitiveType}}
            $this->data['{{name}}']->set(${{name}});{{/isPrimitiveType}}{{/isContainer}}{{^isContainer}}
            $this->data['{{name}}']->set(${{name}}{{^isPrimitiveType}}->getData(){{/isPrimitiveType}});{{/isContainer}}
        } catch (RestApi_TypeUtils_ParseException $e) {
            throw new \InvalidArgumentException($e->getMessage())
        }
        return $this;
    }
{{/vars}}
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString() {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode($this->getData(), JSON_PRETTY_PRINT);
        } else {
            return json_encode($this->getData());
        }
    }

    /**
     * Checks if the object contains all mandatory fields and that fields are in correct format
     * @throws RestApi_ProcessingException
     */
    public function check() { {{#vars}}{{#required}}
        {{#isPrimitiveType}}if ($this->{{getter}}() == '') {
            throw RestApi_Make::error(400, '{{name}} is required');
        }{{/isPrimitiveType}}{{^isPrimitiveType}}$this->{{getter}}()->check();{{/isPrimitiveType}}{{/required}}{{#isEnum}}
        $allowed_values = [{{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}];
        if (!in_array($this->{{getter}}(), $allowed_values)) {
            throw RestApi_Make::error(400, "Invalid value for '{{name}}', must be one of {{#allowableValues}}{{#values}}'{{{this}}}'{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}");
        }{{/isEnum}}{{/vars}}
    }
}
{{/model}}
{{/models}}