<?php
{{#models}}
{{#model}}
/**
 * {{classname}}
 *
 * @copyright 	Copyright (c) 2015 Quality Unit s.r.o.
 * @author		AUTO GENERATED CODE
 * @category	Class
 * @package 	{{invokerPackage}}
 * @license		http://www.qualityunit.com/licenses/license
 *
 * Licensed under the Quality Unit, s.r.o. Standard End User License Agreement,
 * Version 1.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * http://www.qualityunit.com/licenses/license
 */
 
/**
 * Auto generated code from swagger api description. DO NOT EDIT !!!!
 */
class {{modelPackage}}_{{classname}} {

	{{#vars}}const {{#fnUpperCase}}{{name}}{{/fnUpperCase}} = '{{name}}';
	{{/vars}}

	private $data;
    
    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null) {
        if ($data === null) {
        	$data = array();
        }
        $this->data = $data;
    }
    
    /**
     * @return array
     */
    public function getData() {
    	return $this->data;
    }
    {{#vars}}
    /**
     * Gets {{name}}
     * @return {{datatype}}
     */
    public function {{getter}}() {
    	if ($this->data[self::{{#fnUpperCase}}{{name}}{{/fnUpperCase}}] == '') {
    		return {{#isContainer}}array(){{/isContainer}}{{^isContainer}}{{{defaultValue}}}{{/isContainer}};
    	}{{#isContainer}}
    	$data = array();
    	foreach ($this->data[self::{{#fnUpperCase}}{{name}}{{/fnUpperCase}}] as $item) {
    		$data[] = new {{#fnItemType}}{{datatype}}{{/fnItemType}}($item);
    	}
    	return $data;{{/isContainer}}{{^isContainer}}{{#isPrimitiveType}}
    	return $this->data[self::{{#fnUpperCase}}{{name}}{{/fnUpperCase}}];{{/isPrimitiveType}}{{^isPrimitiveType}}
    	return new {{datatype}}($this->data[self::{{#fnUpperCase}}{{name}}{{/fnUpperCase}}]);{{/isPrimitiveType}}{{/isContainer}}
    }
  
    /**
     * Sets {{name}}
     * @param {{datatype}} ${{name}} {{#description}}{{{description}}}{{/description}}
     * @return $this
     */
    public function {{setter}}({{#isContainer}}array {{/isContainer}}${{name}}) {
        {{#isEnum}}$allowed_values = array({{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}});
        if (!in_array(${{{name}}}, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for '{{name}}', must be one of {{#allowableValues}}{{#values}}'{{{this}}}'{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}");
        }
        {{/isEnum}}{{#isContainer}}$this->data[self::{{#fnUpperCase}}{{name}}{{/fnUpperCase}}] = array();
        foreach (${{name}} as $item) {
        	$this->data[self::{{#fnUpperCase}}{{name}}{{/fnUpperCase}}][] = $item->getData();
        }{{/isContainer}}{{^isContainer}}{{#isPrimitiveType}}$this->data[self::{{#fnUpperCase}}{{name}}{{/fnUpperCase}}] = ${{name}};{{/isPrimitiveType}}{{^isPrimitiveType}}$this->data[self::{{#fnUpperCase}}{{name}}{{/fnUpperCase}}] = ${{name}}->getData();{{/isPrimitiveType}}{{/isContainer}}
    }
    {{/vars}}
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString() {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode($this->getData(), JSON_PRETTY_PRINT);
        } else {
            return json_encode($this->getData());
        }
    }
    
    /**
     * Checks if the object contains all mandatory fields and that fields are in correct format
     * @throws Exception
     */
    public function check() {
    	{{#vars}}{{#required}}{{#isPrimitiveType}}if ($this->{{getter}}() == '') {
    		throw new Exception('{{name}} is required');
    	}{{/isPrimitiveType}}{{^isPrimitiveType}}$this->{{getter}}()->check();{{/isPrimitiveType}}
    	{{/required}}{{#isEnum}}$allowed_values = array({{#allowableValues}}{{#values}}"{{{this}}}"{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}});
        if (!in_array($this->{{getter}}(), $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for '{{name}}', must be one of {{#allowableValues}}{{#values}}'{{{this}}}'{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}");
        }
        {{/isEnum}}{{/vars}}
    }
}
{{/model}}
{{/models}}
