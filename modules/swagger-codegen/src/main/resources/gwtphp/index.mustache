<?php
/**
 * @copyright Copyright (c) 2016 Quality Unit s.r.o.
 *   Licensed under the Quality Unit, s.r.o. Standard End User License Agreement,
 *   Version 1.0 (the "License"); you may not use this file except in compliance
 *   with the License. You may obtain a copy of the License at
 *   http://www.qualityunit.com/licenses/license
 */

/**
 * Auto generated code from swagger api description. DO NOT EDIT !!!!
 * Codegen version: {{codegenVersion}}
 */
require '../../scripts/bootstrap_api.php';

$app = new \Slim\Slim();

try {
    RestApi_Make::init(new {{apiPackage}}_Make());
} catch (Exception $ignore) {}

try {
    // You must implement this class, it will not be generated !!! It must extend RestApi_Auth
    $auth = {{apiPackage}}_Auth::init($app->request());
} catch (Exception $e) {
    $response = new RestApi_Response($app->response());
    $response->setError($e);
    $response->send();
    exit();
}
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}
/*
 * {{notes}}
 */
$app->{{#fnLowerCase}}{{httpMethod}}{{/fnLowerCase}}('{{#fnSlimPath}}{{path}}{{/fnSlimPath}}', function ({{#pathParams}}${{paramName}}{{#hasMore}}, {{/hasMore}}{{/pathParams}}) use ($app, $auth) {
    $params = new RestApi_Params($app->request(){{#authMethods}}, array({{#scopes}}'{{scope}}'{{#hasMore}}, {{/hasMore}}{{/scopes}}){{/authMethods}});
    $response = new RestApi_Response($app->response());
    try { {{#allParams}}{{^isPathParam}}{{^isBodyParam}}
        $params->check('{{paramName}}', {{#required}}true{{/required}}{{^required}}false{{/required}}, '{{defaultValue}}', '{{dataType}}', {{#isEnum}}array({{#allowableValues}}{{#values}}'{{.}}'{{^-last}}, {{/-last}}{{/values}}{{/allowableValues}}){{/isEnum}}{{^isEnum}}null{{/isEnum}});{{/isBodyParam}}{{/isPathParam}}{{/allParams}}{{#authMethods}}{{#isOAuth}}
        $auth->checkScope($params->getScopes());{{/isOAuth}}{{/authMethods}}{{#bodyParam}}{{^dataType}}
        $data = $params->getBody(){{/dataType}}{{#dataType}}
        $data = new {{dataType}}($params->getBody());
        $data->check();{{/dataType}}{{/bodyParam}}
        $handler = new {{#fnClassName}}{{vendorExtensions.x-handler}}{{/fnClassName}}($params);
        $response->setResult($handler->{{#fnMethodName}}{{vendorExtensions.x-handler}}{{/fnMethodName}}({{#pathParams}}${{paramName}}{{#hasMore}}, {{/hasMore}}{{/pathParams}}{{#bodyParam}}{{#hasPathParams}}, {{/hasPathParams}}$data{{/bodyParam}}));
    } catch (Exception $e) {
        $response->setError($e);
    }
});
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
RestApi_Make::run($app);